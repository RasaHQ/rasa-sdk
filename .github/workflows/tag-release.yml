name: Tag Release Version
on:
  pull_request:
    branches:
      - main
      - '[0-9]+.[0-9]+.x'
    types: [closed]
  workflow_dispatch:

env:
  COMMIT_EMAIL: sara-tagger@users.noreply.github.com
  DEFAULT_PYTHON_VERSION: "3.10"

jobs:
  if_merged_tag_release:
    name: Tag Release Version
    if: startsWith(github.head_ref, 'prepare-release-') && github.event.pull_request.merged == true
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout git repository 🕝
        uses: actions/checkout@b4ffde65f46336ab88eb53be808477a3936bae11 # v4
        with:
          token: ${{ secrets.RELEASE_TAGGER_PAT }}

      - name: Set up Python ${{ env.DEFAULT_PYTHON_VERSION }} 🐍
        uses: actions/setup-python@0a5c61591373683505ea898e09a3ea4f39ef2b9c # v5.0.0
        with:
          python-version: ${{ env.DEFAULT_PYTHON_VERSION }}

      - name: Read Poetry Version 🔢
        run: |
          echo "POETRY_VERSION=$(scripts/poetry-version.sh)" >> $GITHUB_ENV
        shell: bash

      - name: Install poetry 🦄
        uses: Gr1N/setup-poetry@15821dc8a61bc630db542ae4baf6a7c19a994844 # v8
        with:
          poetry-version: ${{ env.POETRY_VERSION }}

      - name: Load Poetry Cached Libraries ⬇
        id: cache-poetry
        uses: actions/cache@13aacd865c20de90d75de3b17ebe84f7a17d57d2 #v4.0.0
        with:
          path: .venv
          key: ${{ runner.os }}-poetry-${{ env.POETRY_VERSION }}-${{ env.DEFAULT_PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}-${{ secrets.POETRY_CACHE_VERSION }}
          restore-keys: ${{ runner.os }}-poetry-${{ env.DEFAULT_PYTHON_VERSION }}

      - name: Clear Poetry cache
        if: steps.cache-poetry.outputs.cache-hit == 'true' && contains(github.event.pull_request.labels.*.name, 'tools:clear-poetry-cache-unit-tests')
        run: rm -r .venv

      - name: Create virtual environment
        if: steps.cache-poetry.outputs.cache-hit != 'true' || contains(github.event.pull_request.labels.*.name, 'tools:clear-poetry-cache-unit-tests')
        run: python -m venv create .venv

      - name: Set up virtual environment
        run: poetry config virtualenvs.in-project true

      - name: Install Dependencies 📦
        # Poetry intermittently fails to install dependency if it is not PEP 517 compliant
        # This is a workaround for that issue
        run: |
          sudo apt-get -y install libpq-dev
          make install

      - name: Configure git
        run: |
          git config --global user.email ${{ env.COMMIT_EMAIL }}
          git config --global user.name "Github Actions"

      - name: Tag Release
        run: make tag-release
